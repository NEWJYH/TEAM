{% extends "index.html" %}
{% block style %}
<style>
    #intro nav ul li.one {
        background-color: rgb(144, 255, 127);
    }

    article {
        margin-top: 50px;
        margin-bottom: 50px;
    }

    article div {
        float: right;
        text-align: center;
        display: inline;
        margin-right: 10px;
    }

    article div.inputDate {
        float: left;
    }

    form {}

    form.option {
        float: right;
    }

    input {
        font-size: 20px;
    }
</style>
{% endblock %}
{% block main %}
<article class="one">
    <div class="inputDate">
        <input type="date" id="startDate" value="{{ defaultStart }}" max="{{ today }}">
        ~
        <input type="date" id="endDate" value="{{ today }}" max="{{ today }}">
        <button id="submit" onClick="doSubmit()">확인</button>
    </div>
    <div>
        <input type="radio" id="24h" name="activity" value="24h">
        <label for="24h">24시간 평균</label>
    </div>
    <div>
        <input type="radio" id="default" name="activity" value="default" checked>
        <label for="default">기본</label>
    </div>
    <canvas id="chartOne"></canvas>
</article>
{% endblock %}
{% block script %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
<script type="text/javascript">
    const randomlist = {{ randomlist }}
    /*
    중간 기간 계산 함수 
    시작 날짜와 종료 날짜를 입력으로 받아
    시작 날짜와 종료 날짜를 포함한 중간 날짜 어레이를 반환
    */
    function getDateRangeData(param1, param2) {  //param1은 시작일, param2는 종료일이다.
        var res_day = [];
        var ss_day = new Date(param1);
        var ee_day = new Date(param2);
        while (ss_day.getTime() <= ee_day.getTime()) {
            var _mon_ = (ss_day.getMonth() + 1);
            _mon_ = _mon_ < 10 ? '0' + _mon_ : _mon_;
            var _day_ = ss_day.getDate();
            _day_ = _day_ < 10 ? '0' + _day_ : _day_;
            res_day.push(ss_day.getFullYear() + '-' + _mon_ + '-' + _day_);
            ss_day.setDate(ss_day.getDate() + 1);
        }
        return res_day;
    }

    const testDataset = [{
        data: randomlist[0],
        label: "1번 방",
        borderColor: "#3e95cd",
        fill: false
    }, {
        data: randomlist[1],
        label: "2번 방",
        borderColor: "#8e5ea2",
        fill: false
    }, {
        data: randomlist[2],
        label: "3번 방",
        borderColor: "#3cba9f",
        fill: false
    }, {
        data: randomlist[3],
        label: "4번 방",
        borderColor: "#e8c3b9",
        fill: false
    }, {
        data: randomlist[4],
        label: "5번 방",
        borderColor: "#c45850",
        fill: false
    }
    ]

    let myChart = new Chart(document.getElementById("chartOne"), {
        type: 'line',
        data: {
            labels: [],
            datasets: testDataset
        },
        options: {
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'day'
                    }
                }
            },
            animation: {
                duration: 0
            }
        }
    });

    /* 기간 제출시 실행 함수
    기간 입력으로부터 값을 받아와서 중간 기간 계산 함수를 통해
    중간 기간 어레이를 생성한 후
    차트의 라벨값을 해당 어레이로 변경 후 차트 업데이트
    */
    function doSubmit() {
        let startDate = document.getElementById('startDate').value;
        let endDate = document.getElementById('endDate').value;
        let middleDate = getDateRangeData(startDate, endDate)
        myChart.data.labels = middleDate
        myChart.update();
        myChart.options.animation.duration = 1000 // 초기 호출 이후 차트 업데이트 시 애니메이션 적용
    }
    doSubmit()
</script>
{% endblock %}